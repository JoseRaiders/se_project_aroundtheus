!function(){"use strict";class e{constructor(e,t,s,n,i,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._deleteCardPopup=n,this._handleDeleteCard=i,this._api=r,this._handleLikeIcon=this._handleLikeIcon.bind(this)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._link,this._name)}))}_handleLikeIcon(){this._isLiked?this._api.dislikeCard(this._id).then((()=>{this._isLiked=!1,this._likeButton.classList.remove("card__like-button_active")})):this._api.likeCard(this._id).then((()=>{this._isLiked=!0,this._likeButton.classList.add("card__like-button_active")}))}_handleDeleteButton(){const e=this._cardElement.dataset.id;this._deleteCardPopup.open(e),this._deleteCardPopup.setConfirmCallback((()=>{this._handleDeleteCard(this._cardElement)}))}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._setEventListeners(),this._isLiked&&this._likeButton.classList.add("card__like-button_active"),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){let e=!1;this._inputElements.forEach((t=>{t.validity.valid||(e=!0)})),e?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputElements)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"!==e.key&&"Esc"!==e.key||this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class n extends s{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}getForm(){return this._popupForm}close(){super.close(),this._popupForm.reset(),this._renderLoading(!1)}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}_renderLoading(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._renderLoading(!0),this._handleFormSubmit(this._getInputValues()).then((()=>{this.close()})).finally((()=>{this._renderLoading(!1)}))}))}}const i={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=document.querySelector("#profile-edit-button"),a=document.forms["profile-form"],o=document.querySelector(".cards__list"),l=document.querySelector(".profile__add-button"),d=document.forms["card-form"],h=document.querySelector(".modal__button-delete"),c=document.querySelector(".profile__image-overlay"),_=document.forms["avatar-form"],u=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._handleResponse)}setUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._handleResponse)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"abab587d-903d-4fa7-90c2-ee61a34ba949","Content-Type":"application/json"}}),m=new class extends s{constructor(e,t){super({popupSelector:e}),this._handleConfirm=t,this._confirmButton=this._popupElement.querySelector(".modal__button-delete")}open(e){this._cardId=e,super.open()}setConfirmCallback(e){this._handleConfirm=e}close(){super.close()}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleConfirm(this._cardId),this.close()}))}}("#delete-card-modal",p);function p(e){const t=e.dataset.id;u.deleteCard(t).then((()=>{e.remove()}))}m.setEventListeners();const E=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{name:this._nameElement.textContent,about:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,avatar:n}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s,n&&(this._avatarElement.src=n)}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"});new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer:y},".cards__list").renderItems(),u.getUserInfo().then((e=>{E.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})}));const v=new n("#avatar-picture-modal",(function(e){return u.setUserAvatar(e.avatar).then((e=>{E.setUserInfo(e),v.close()}))}));v.setEventListeners();const b=new t(i,a),f=new t(i,d),L=new t(i,_);b.enableValidation(),f.enableValidation(),L.enableValidation();const C=new n("#profile-edit-modal",(function(e){return E.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),u.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}).then((e=>{E.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),C.close()}))}));C.setEventListeners();const S=new n("#add-card-modal",(function(e){const t=e.title,s=e.link;return u.addCard({name:t,link:s}).then((e=>{y(e),S.close(),d.reset(),f.disableButton()}))}));S.setEventListeners(),S.getForm();const k=new class extends s{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__image-preview"),this._title=this._popupElement.querySelector(".modal__image-title")}open(e){let{link:t,name:s}=e;this._image.src=t,this._image.alt=s,this._title.textContent=s,super.open()}}("#modal-image-preview");function g(e,t){k.open({link:e,name:t})}function y(t){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";const n=new e(t,"#card-template",g,m,p,u).getView();n.dataset.id=t._id,o[s](n)}k.setEventListeners(),u.getInitialCards().then((e=>{e.forEach((e=>{y(e)}))})),r.addEventListener("click",(()=>{const e=E.getUserInfo();C.setInputValues(e),b.resetValidation(),C.open()})),l.addEventListener("click",(()=>{S.open()})),h.addEventListener("click",(()=>{const e=h.dataset.cardId;e&&(p(e),u.deleteCard(e).then((()=>{const t=document.querySelector(`[data-id="${e}"]`);t&&t.remove(),m.close()})))})),c.addEventListener("click",(()=>{v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YTdFLGVBQWV3RixHQUM1QmQsRUFBbUI3RixrQkFDbkJnRyxFQUFhNUksTUFBTSxJQUlyQjhFLEVBQWM1RixpQkFBaUIsU0FBUyxLQUN0QzJKLEVBQWE3SSxNQUFNLElBR3JCZ0YsRUFBYTlGLGlCQUFpQixTQUFTLEtBRXJDLE1BQU1VLEVBQVNvRixFQUFhbEYsUUFBUUYsT0FDL0JBLElBQ0w3QixFQUFpQjZCLEdBRWpCNUIsRUFBSXNJLFdBQVcxRyxHQUFRTCxNQUFLLEtBQzFCLE1BQU00SCxFQUFjaEgsU0FBU0MsY0FBYyxhQUFhUixPQUNwRHVILEdBQ0ZBLEVBQVkxSCxTQUVkM0IsRUFBZ0JvRixPQUFPLElBQ3ZCLElBSUorQixFQUFpQi9GLGlCQUFpQixTQUFTLEtBQ3pDcUosRUFBWXZJLE1BQU0sRyIsInNvdXJjZXMiOlsid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1BvcHVwQ29uZmlybWF0aW9uLmpzIiwid2VicGFjazovL0Fyb3VuZCB0aGUgVVMvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY3JlYXRlcyB0aGUgY2FyZHMgd2l0aCB0aGUgaW1hZ2UgYW5kIHRpdGxlXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgY2FyZCxcclxuICAgIGNhcmRTZWxlY3RvcixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBkZWxldGVDYXJkUG9wdXAsXHJcbiAgICBoYW5kbGVEZWxldGVDYXJkLFxyXG4gICAgYXBpXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gY2FyZC5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGNhcmQubGluaztcclxuICAgIHRoaXMuX2lkID0gY2FyZC5faWQ7XHJcbiAgICB0aGlzLl9pc0xpa2VkID0gY2FyZC5pc0xpa2VkO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB0aGlzLl9kZWxldGVDYXJkUG9wdXAgPSBkZWxldGVDYXJkUG9wdXA7XHJcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkID0gaGFuZGxlRGVsZXRlQ2FyZDtcclxuICAgIHRoaXMuX2FwaSA9IGFwaTtcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VJY29uID0gdGhpcy5faGFuZGxlTGlrZUljb24uYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICA9ICAgICAgICAgICAgICAgICAgTWV0aG9kcyAgICAgICAgICAgICAgICAgICA9XHJcbiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuICAvLyBsaWtlIGJ1dHRvbiBldmVudCBsaXN0ZW5lclxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUljb24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGRlbGV0ZSBidXR0b24gZXZlbnQgbGlzdGVuZXJcclxuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVCdXR0b24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGltYWdlIGNsaWNrIGV2ZW50IGxpc3RlbmVyXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzLl9saW5rLCB0aGlzLl9uYW1lKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VJY29uKCkge1xyXG4gICAgLy8gdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgaWYgKHRoaXMuX2lzTGlrZWQpIHtcclxuICAgICAgdGhpcy5fYXBpLmRpc2xpa2VDYXJkKHRoaXMuX2lkKS50aGVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLl9pc0xpa2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2FwaS5saWtlQ2FyZCh0aGlzLl9pZCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faXNMaWtlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9oYW5kbGVEZWxldGVCdXR0b24oKSB7XHJcbiAgICBjb25zdCBjYXJkSWQgPSB0aGlzLl9jYXJkRWxlbWVudC5kYXRhc2V0LmlkOyAvLyBnZXQgdGhlIGNhcmRJZFxyXG4gICAgdGhpcy5fZGVsZXRlQ2FyZFBvcHVwLm9wZW4oY2FyZElkKTsgLy8gcGFzcyBjYXJkSWQgd2hlbiBvcGVuaW5nIHRoZSBwb3B1cFxyXG4gICAgdGhpcy5fZGVsZXRlQ2FyZFBvcHVwLnNldENvbmZpcm1DYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNhcmQodGhpcy5fY2FyZEVsZW1lbnQpOyAvLyBwYXNzIGNhcmQgZWxlbWVudCB0byByZW1vdmUgaXRcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IHRoZSBjYXJkIHZpZXcgYW5kIHNldCBldmVudCBsaXN0ZW5lcnNcclxuICBnZXRWaWV3KCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIik7XHJcblxyXG4gICAgLy8gc2V0IGNhcmQgY29udGVudFxyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgLy8gaW52b2tpbmcgdGhlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAvLyBpbml0aWFsIGxpa2Ugc3RhdHVzXHJcbiAgICBpZiAodGhpcy5faXNMaWtlZCkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmV0dXJuIHRoZSBjYXJkIGVsZW1lbnRcclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiLy8gY2hlY2tzIHRoYXQgdGhlIGluZm8gdHlwZWQgaW4gZm9ybXMgYXJlIGNvcnJlY3RcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgPSAgICAgICAgICAgICAgICAgIE1ldGhvZHMgICAgICAgICAgICAgICAgICAgPVxyXG4gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgLy8gYXBwbHkgYSBjbGFzcyB0byBzaG93IHRoZSBlcnJvciBlbGVtZW50XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgLy8gYXBwbHkgYSBjbGFzcyB0byBoaWRlIHRoZSBlcnJvciBlbGVtZW50XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgLy8gaWYgTk9UICghKSwgc2hvdyB0aGUgZXJyb3IgZWxlbWVudFxyXG4gICAgICByZXR1cm4gdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICAgIC8vIGlmIGl0J3MgdmFsaWQsIGhpZGUgdGhlIGVycm9yIGVsZW1lbnRcclxuICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBsZXQgZm91bmRJbnZhbGlkID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICBmb3VuZEludmFsaWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZm91bmRJbnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgICAvLyB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgLy8gcmV0dXJuICh0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBbXHJcbiAgICAgIC4uLnRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvciksXHJcbiAgICBdO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSh0aGlzLl9pbnB1dEVsZW1lbnRzKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgLy8gd2hlbiB0aGUgZm9ybSBnZXRzIHN1Ym1pdHRlZCwgY2FuY2VsIHRoZSBkZWZhdWx0IGJyb3dzZXIgYmVoYXZpb3JcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWFsIHJlc2V0VmFsaWRhdGlvbiBtZXRob2RcclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICAvLyB0b2dnbGUgdGhlIHN1Ym1pdCBidXR0b24gc3RhdGVcclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcblxyXG4gICAgLy8gY2xlYXIgZXJyb3JzIGluIHRoZSBmb3JtXHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBkaXNhYmxlQnV0dG9uIG1ldGhvZFxyXG4gIGRpc2FibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICAvLyBvcGVuIHBvcHVwICYgZGV0ZWN0IHRoZSBlc2Mga2V5IHRvIGNsb3NlIHBvcHVwXHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgLy8gY2xvc2UgcG9wdXAgJiByZW1vdmUgZXNjIGtleSBsaXN0ZW5lclxyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7XHJcbiAgICAvLyBsaXN0ZW5zIGZvciBlc2Mga2V5XHJcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIiB8fCBldnQua2V5ID09PSBcIkVzY1wiKSB7XHJcbiAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfb3BlbmVkXCIpLmZvckVhY2goKG1vZGFsKSA9PiB7XHJcbiAgICAgIC8vICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgICAgLy8gfSk7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgLy8gYWRkIGEgbW91c2Vkb3duIGV2ZW50IGxpc3RlbmVyIHRvIGNsb3NlIHRoZSBwb3B1cFxyXG4gICAgLy8gaWYgb2NjdXJzIG91dHNpZGUgdGhlIHBvcHVwIG9yIG9uIHRoZSBjbG9zZSBpY29uXHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX29wZW5lZFwiKSB8fFxyXG4gICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxfX2Nsb3NlXCIpXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuLy8gaGFuZGxlcyBhY3Rpb25zIGZvciB0aGUgcHJvZmlsZSBwb3B1cFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQgPSBoYW5kbGVGb3JtU3VibWl0O1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbF9faW5wdXRcIik7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uVGV4dCA9IHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcclxuICB9XHJcblxyXG4gIC8vIG1ldGhvZCB0byBwb3B1bGF0ZSBpbnB1dCB2YWx1ZXMgYmFzZWQgb24gcHJvdmlkZWQgZGF0YVxyXG4gIHNldElucHV0VmFsdWVzKGRhdGEpIHtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBpbnB1dC52YWx1ZSA9IGRhdGFbaW5wdXQubmFtZV07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdGhlIGZvcm0gZWxlbWVudFxyXG4gIGdldEZvcm0oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcG9wdXBGb3JtO1xyXG4gIH1cclxuXHJcbiAgLy8gY2xvc2UgcG9wdXAgYW5kIHJlc2V0IGZvcm0gYWxvbmcgd2l0aCBidXR0b24gdGV4dFxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gICAgdGhpcy5fcmVuZGVyTG9hZGluZyhmYWxzZSk7IC8vIHJlc2V0IGJ1dHRvbiB3aGVuIGNsb3NlZFxyXG4gIH1cclxuXHJcbiAgLy8gY29sbGVjdCAmIHJldHVybiBmb3JtIGlucHV0IHZhbHVlc1xyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgX3JlbmRlckxvYWRpbmcoaXNMb2FkaW5nKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBpc0xvYWRpbmdcclxuICAgICAgPyBcIlNhdmluZy4uLlwiXHJcbiAgICAgIDogdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcclxuICB9XHJcblxyXG4gIC8vIGhhbmRsZSBvdXRzaWRlIGNsaWNrIGNsb3N1cmUgJiBmb3JtIHN1Ym1pc3Npb25cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAvLyB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgICAvLyB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTsgLy8gcmVzZXQgZnJvbSBpbnB1dCBhZnRlciBzdWNjZXNzZnVsIGZvcm0gc3VibWlzc2lvblxyXG4gICAgICAvLyB0aGlzLmNsb3NlKCk7XHJcblxyXG4gICAgICB0aGlzLl9yZW5kZXJMb2FkaW5nKHRydWUpOyAvLyBzaG93IFNhdmluZy4uLlxyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fcmVuZGVyTG9hZGluZyhmYWxzZSk7IC8vIHJldmVydCB0byBvcmlnaW5hbCB0ZXh0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICAvLyB7XHJcbiAgLy8gICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gIC8vICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gIC8vIH0sXHJcbiAgLy8ge1xyXG4gIC8vICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4gIC8vICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xha2UtbG91aXNlLmpwZ1wiLFxyXG4gIC8vIH0sXHJcbiAgLy8ge1xyXG4gIC8vICAgbmFtZTogXCJCYWxkIE1vdW50YWluc1wiLFxyXG4gIC8vICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2JhbGQtbW91bnRhaW5zLmpwZ1wiLFxyXG4gIC8vIH0sXHJcbiAgLy8ge1xyXG4gIC8vICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgLy8gICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICAvLyB9LFxyXG4gIC8vIHtcclxuICAvLyAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbiAgLy8gICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvdmFub2lzZS5qcGdcIixcclxuICAvLyB9LFxyXG4gIC8vIHtcclxuICAvLyAgIG5hbWU6IFwiTGFnbyBkaSBCcmFpZXNcIixcclxuICAvLyAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWdvLmpwZ1wiLFxyXG4gIC8vIH0sXHJcbl07XHJcblxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG49ICAgICAgICAgRm9ybSBWYWxpZGF0aW9uIFNldHRpbmdzICAgICAgICAgICAgPVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5leHBvcnQgY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcbiIsIi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICAgICAgICBNb2R1bGVzICAgICAgICAgICAgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IHsgaW5pdGlhbENhcmRzLCBzZXR0aW5ncyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IFBvcHVwQ29uZmlybWF0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwQ29uZmlybWF0aW9uLmpzXCI7XHJcblxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG49ICAgICAgICAgICAgICAgICAgRWxlbWVudHMgICAgICAgICAgICAgICAgICAgPVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5jb25zdCBwcm9maWxlRWRpdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LWJ1dHRvblwiKTtcclxuY29uc3QgcHJvZmlsZUVkaXRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJwcm9maWxlLWZvcm1cIl07XHJcbmNvbnN0IGNhcmRMaXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XHJcbmNvbnN0IGFkZE5ld0NhcmRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2FkZC1idXR0b25cIik7XHJcbmNvbnN0IG5ld0NhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJjYXJkLWZvcm1cIl07XHJcbmNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2J1dHRvbi1kZWxldGVcIik7XHJcbmNvbnN0IGF2YXRhckVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlLW92ZXJsYXlcIik7XHJcbmNvbnN0IGF2YXRhckZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImF2YXRhci1mb3JtXCJdO1xyXG5cclxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuPSAgICAgICAgICAgICAgICAgICAgIEFQSSAgICAgICAgICAgICAgICAgICAgID1cclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC1hcGkuZW4udHJpcGxldGVuLXNlcnZpY2VzLmNvbS92MVwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiYWJhYjU4N2QtOTAzZC00ZmE3LTkwYzItZWU2MWEzNGJhOTQ5XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICBSZW5kZXIgJiBEZWxldGUgQ2FyZHMgICAgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbi8vIGluaXRhbGl6YXRlIGRlbGV0ZSBjYXJkIGJ1dHRvbiBiZWZvcmUgbmV3IHNlY3Rpb25cclxuY29uc3QgZGVsZXRlQ2FyZFBvcHVwID0gbmV3IFBvcHVwQ29uZmlybWF0aW9uKFxyXG4gIFwiI2RlbGV0ZS1jYXJkLW1vZGFsXCIsXHJcbiAgaGFuZGxlRGVsZXRlQ2FyZFxyXG4pO1xyXG5kZWxldGVDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIGhhbmRsZSB0aGUgZGVsZXRlIGJ1dHRvbiBjbGlja1xyXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDYXJkKGNhcmRFbGVtZW50KSB7XHJcbiAgY29uc3QgY2FyZElkID0gY2FyZEVsZW1lbnQuZGF0YXNldC5pZDtcclxuXHJcbiAgLy8gZGVsZXRlIHJlcXVlc3QgdG8gdGhlIEFQSVxyXG4gIGFwaS5kZWxldGVDYXJkKGNhcmRJZCkudGhlbigoKSA9PiB7XHJcbiAgICBjYXJkRWxlbWVudC5yZW1vdmUoKTsgLy8gcmVtb3ZlIGNhcmQgZnJvbSB0aGUgRE9NXHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICBTZWN0aW9uIGFuZCBVc2VySW5mbyAgICAgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgZGVzY3JpcHRpb25TZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcclxuICBhdmF0YXJTZWxlY3RvcjogXCIucHJvZmlsZV9faW1hZ2VcIixcclxufSk7XHJcblxyXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IGluaXRpYWxDYXJkcyxcclxuICAgIHJlbmRlcmVyOiByZW5kZXJDYXJkLFxyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2xpc3RcIlxyXG4pO1xyXG5zZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcblxyXG4vLyByZXRyaWV2ZSB1c2UgaW5mb1xyXG5hcGkuZ2V0VXNlckluZm8oKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgLy8gY29uc29sZS5sb2coZGF0YSk7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgYWJvdXQ6IGRhdGEuYWJvdXQsXHJcbiAgICBhdmF0YXI6IGRhdGEuYXZhdGFyLFxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgbmFtZTogaW5wdXRWYWx1ZXMubmFtZSxcclxuICAgIGFib3V0OiBpbnB1dFZhbHVlcy5hYm91dCxcclxuICAgIGF2YXRhcjogaW5wdXRWYWx1ZXMuYXZhdGFyLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gYXBpXHJcbiAgICAuc2V0VXNlckluZm8oe1xyXG4gICAgICBuYW1lOiBpbnB1dFZhbHVlcy5uYW1lLFxyXG4gICAgICBhYm91dDogaW5wdXRWYWx1ZXMuYWJvdXQsXHJcbiAgICAgIGF2YXRhcjogaW5wdXRWYWx1ZXMuYXZhdGFyLFxyXG4gICAgfSlcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIC8vIGFmdGVyIHVwZGF0aW5nLCByZWZsZWN0IHRoZSBjaGFuZ2VzIGluIHRoZSBVSVxyXG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgIGFib3V0OiBkYXRhLmFib3V0LFxyXG4gICAgICAgIGF2YXRhcjogZGF0YS5hdmF0YXIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBwcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG49ICAgICAgICAgICAgICAgSGFuZGxlIGF2YXRhciAgICAgICAgICAgICAgICAgPVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG4vLyBpbnN0YW50aWF0ZSB0aGUgYXZhdGFyIHBvcHVwXHJcbmNvbnN0IGF2YXRhclBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjYXZhdGFyLXBpY3R1cmUtbW9kYWxcIixcclxuICBoYW5kbGVBdmF0YXJGb3JtU3VibWl0XHJcbik7XHJcbmF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVBdmF0YXJGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgLy8gcGFzcyBhdmF0YXIgdXJsIHRvIHRoZSBBUElcclxuICByZXR1cm4gYXBpLnNldFVzZXJBdmF0YXIoaW5wdXRWYWx1ZXMuYXZhdGFyKS50aGVuKCh1cGRhdGVkRGF0YSkgPT4ge1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8odXBkYXRlZERhdGEpOyAvLyB1cGRhdGUgYXZhdGFyIGluIHRlaCBET01cclxuICAgIGF2YXRhclBvcHVwLmNsb3NlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICAgRm9ybSBWYWxpZGF0aW9uICAgICAgICAgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbmNvbnN0IGVkaXRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBwcm9maWxlRWRpdEZvcm0pO1xyXG5jb25zdCBhZGRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBuZXdDYXJkRm9ybSk7XHJcbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGF2YXRhckZvcm0pO1xyXG5cclxuZWRpdEZvcm1WYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTsgLy8gY2hlY2sgdGhlIHByb2ZpbGUgZm9ybVxyXG5hZGRGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7IC8vIGNoZWNrIHRoZSBmb3JtIGFkZGluZyBuZXcgY2FyZHNcclxuYXZhdGFyRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpOyAvLyBjaGVjayB0aGUgYXZhdGFyIGZvcm1cclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICBQb3B1cCBhbmQgRm9ybSBJbnN0YW5jZXMgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbmNvbnN0IHByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxyXG4gIGhhbmRsZVByb2ZpbGVGb3JtU3VibWl0XHJcbik7XHJcbnByb2ZpbGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjYWRkLWNhcmQtbW9kYWxcIixcclxuICBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdFxyXG4pO1xyXG5hZGRDYXJkUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuYWRkQ2FyZFBvcHVwLmdldEZvcm0oKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmRGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgY29uc3QgbmFtZSA9IGlucHV0VmFsdWVzLnRpdGxlO1xyXG4gIGNvbnN0IGxpbmsgPSBpbnB1dFZhbHVlcy5saW5rO1xyXG5cclxuICAvLyBzZW5kIG5ldyBjYXJkIHRvIHRoZSBzZXJ2ZXJcclxuICByZXR1cm4gYXBpLmFkZENhcmQoeyBuYW1lLCBsaW5rIH0pLnRoZW4oKG5ld0NhcmQpID0+IHtcclxuICAgIHJlbmRlckNhcmQobmV3Q2FyZCk7XHJcbiAgICBhZGRDYXJkUG9wdXAuY2xvc2UoKTtcclxuICAgIG5ld0NhcmRGb3JtLnJlc2V0KCk7XHJcbiAgICAvLyBkaXNhYmxlIHN1Ym1pdCBidXR0b24gYWZ0ZXIgYWRkaW5nIGEgY2FyZFxyXG4gICAgYWRkRm9ybVZhbGlkYXRpb24uZGlzYWJsZUJ1dHRvbigpO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG49ICAgICAgICAgICAgSGFuZGxlIEltYWdlIFByZXZpZXcgICAgICAgICAgICAgPVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5jb25zdCBwcmV2aWV3SW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNtb2RhbC1pbWFnZS1wcmV2aWV3XCIpO1xyXG5wcmV2aWV3SW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlSW1hZ2VDbGljayhsaW5rLCBuYW1lKSB7XHJcbiAgcHJldmlld0ltYWdlUG9wdXAub3Blbih7IGxpbmssIG5hbWUgfSk7XHJcbn1cclxuXHJcbi8vIHJlZmFjdG9yZWQgcmVuZGVyQ2FyZCBmdW5jdGlvbiB1c2luZyB0aGUgQ2FyZCBjbGFzc1xyXG5mdW5jdGlvbiByZW5kZXJDYXJkKGl0ZW0sIG1ldGhvZCA9IFwicHJlcGVuZFwiKSB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgaXRlbSxcclxuICAgIFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBkZWxldGVDYXJkUG9wdXAsXHJcbiAgICBoYW5kbGVEZWxldGVDYXJkLFxyXG4gICAgYXBpXHJcbiAgKTtcclxuICBjb25zdCBjYXJkRWxlbWVudCA9IGNhcmQuZ2V0VmlldygpO1xyXG4gIGNhcmRFbGVtZW50LmRhdGFzZXQuaWQgPSBpdGVtLl9pZDsgLy8gc3RvcmUgdGhlIGNhcmRJZCB0byB0aGUgY2FyZCBlbGVtZW50XHJcbiAgY2FyZExpc3RFbGVtZW50W21ldGhvZF0oY2FyZEVsZW1lbnQpO1xyXG4gIC8vIGNvbnNvbGUubG9nKFwiQ2FyZCBJRDpcIiwgY2FyZEVsZW1lbnQuZGF0YXNldC5pZCk7XHJcbn1cclxuXHJcbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbj0gICAgICAgICAgICAgICBJbml0aWFsIENhcmRzICAgICAgICAgICAgICAgICA9XHJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXHJcbi8vIHJldHJpZXZlIGluaXRpYWwgY2FyZHNcclxuYXBpLmdldEluaXRpYWxDYXJkcygpLnRoZW4oKGNhcmRzKSA9PiB7XHJcbiAgLy8gZGlzcGxheSBjYXJkcyBpbiB0aGUgRE9NXHJcbiAgY2FyZHMuZm9yRWFjaCgoY2FyZCkgPT4ge1xyXG4gICAgLy8gcmVuZGVyIGVhY2ggY2FyZCAoYXNzdW1pbmcgYSByZW5kZXJDYXJkIGZ1bmN0aW9uKVxyXG4gICAgcmVuZGVyQ2FyZChjYXJkKTtcclxuICB9KTtcclxufSk7XHJcblxyXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG49ICAgICAgICAgICAgICBFdmVudCBMaXN0ZW5lcnMgICAgICAgICAgICAgICAgPVxyXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xyXG5wcm9maWxlRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IGN1cnJlbnRVc2VySW5mbyA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7IC8vIHsgbmFtZTogJ1Byb2ZpbGUgTmFtZScsIGFib3V0OiAnUHJvZmlsZSBEZXNjcmlwdGlvbicgfVxyXG4gIHByb2ZpbGVQb3B1cC5zZXRJbnB1dFZhbHVlcyhjdXJyZW50VXNlckluZm8pOyAvLyBwb3B1bGF0ZSBmb3JtIGlucHV0cyB3aXRoIHVzZXIgZGF0YVxyXG4gIGVkaXRGb3JtVmFsaWRhdGlvbi5yZXNldFZhbGlkYXRpb24oKTsgLy8gY2xlYXIgYW55IHZhbGlkYXRpb24gZXJyb3JzIGJlZm9yZSBvcGVuaW5nXHJcbiAgcHJvZmlsZVBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyByZXNldCB2YWxpZGF0aW9uIGJlZm9yZSBvcGVuaW5nIHRoZSBjYXJkIG1vZGFsXHJcbmFkZE5ld0NhcmRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhZGRDYXJkUG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcbmRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIC8vIGNvbnNvbGUubG9nKFwiRGVsZXRlIGJ1dHRvbiAoWWVzKSBjbGlja2VkXCIpO1xyXG4gIGNvbnN0IGNhcmRJZCA9IGRlbGV0ZUJ1dHRvbi5kYXRhc2V0LmNhcmRJZDsgLy8gcmV0cmlldmUgY2FyZElkXHJcbiAgaWYgKCFjYXJkSWQpIHJldHVybjsgLy8gZW5zdXJlIGNhcmRJZCBleGlzdHMgYmVmb3JlIEFQSSBjYWxsXHJcbiAgaGFuZGxlRGVsZXRlQ2FyZChjYXJkSWQpO1xyXG5cclxuICBhcGkuZGVsZXRlQ2FyZChjYXJkSWQpLnRoZW4oKCkgPT4ge1xyXG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZD1cIiR7Y2FyZElkfVwiXWApOyAvLyBmaW5kIGNhcmQgZWxlbWVudFxyXG4gICAgaWYgKGNhcmRFbGVtZW50KSB7XHJcbiAgICAgIGNhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlQ2FyZFBvcHVwLmNsb3NlKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy8gb3BlbiB0aGUgcG9wdXAgd2hlbiB0aGUgYXZhdGFyIGVkaXQgaWNvbiBpcyBjbGlja2VkXHJcbmF2YXRhckVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhdmF0YXJQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgIHRoaXMuX2Jhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmw7XHJcbiAgICB0aGlzLl9oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogYWJvdXQsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckF2YXRhcihhdmF0YXIpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiBhdmF0YXIsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbmFtZSwgbGluayB9KSxcclxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZChjYXJkSWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgbGlrZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGRpc2xpa2VDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlUmVzcG9uc2UocmVzKSB7XHJcbiAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgdGhlIHNlcnZlciByZXR1cm5zIGFuIGVycm9yLCByZWplY3QgdGhlIHByb21pc2VcclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVDb25maXJtKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9oYW5kbGVDb25maXJtID0gaGFuZGxlQ29uZmlybTtcclxuICAgIHRoaXMuX2NvbmZpcm1CdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWxfX2J1dHRvbi1kZWxldGVcIlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9wZW4oY2FyZElkKSB7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBjYXJkSWQ7IC8vIHN0b3JlIGNhcmRJZCB3aGVuIHBvcHVwIG9wZW5zXHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG5cclxuICBzZXRDb25maXJtQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgIHRoaXMuX2hhbmRsZUNvbmZpcm0gPSBjYWxsYmFjaztcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX2NvbmZpcm1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlQ29uZmlybSh0aGlzLl9jYXJkSWQpOyAvLyBzdG9yZSBjYXJkSWQgdG8gZGVsZXRlIGhhbmRsZXJcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIG1hbmFnZXMgcHJvZmlsZSBpbmZvXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3RvciwgZGVzY3JpcHRpb25TZWxlY3RvciwgYXZhdGFyU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9kZXNjcmlwdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlc2NyaXB0aW9uU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAvLyBpbmZvIGFib3V0IHRoZSB1c2VyXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYWJvdXQ6IHRoaXMuX2Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCxcclxuICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXJFbGVtZW50LnNyYyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGFib3V0LCBhdmF0YXIgfSkge1xyXG4gICAgLy8gYWRkIG5ldyB1c2VyIGRhdGFcclxuICAgIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2Rlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGFib3V0O1xyXG4gICAgaWYgKGF2YXRhcikge1xyXG4gICAgICB0aGlzLl9hdmF0YXJFbGVtZW50LnNyYyA9IGF2YXRhcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuLy8gaGFuZGxlcyBkYXRhIGZvciB0aGUgY2FyZCBwb3B1cFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19pbWFnZS1wcmV2aWV3XCIpO1xyXG4gICAgdGhpcy5fdGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtdGl0bGVcIik7XHJcbiAgfVxyXG5cclxuICAvLyBzZXQgc3JjICYgYWx0IGZvciB0aGUgaW1hZ2UgYW5kIHRoZSB0ZXh0IG9mIHRpdGxlXHJcbiAgb3Blbih7IGxpbmssIG5hbWUgfSkge1xyXG4gICAgdGhpcy5faW1hZ2Uuc3JjID0gbGluaztcclxuICAgIHRoaXMuX2ltYWdlLmFsdCA9IG5hbWU7XHJcbiAgICB0aGlzLl90aXRsZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJDYXJkIiwiY29uc3RydWN0b3IiLCJjYXJkIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImRlbGV0ZUNhcmRQb3B1cCIsImhhbmRsZURlbGV0ZUNhcmQiLCJhcGkiLCJ0aGlzIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2lkIiwiX2lzTGlrZWQiLCJpc0xpa2VkIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2RlbGV0ZUNhcmRQb3B1cCIsIl9oYW5kbGVEZWxldGVDYXJkIiwiX2FwaSIsIl9oYW5kbGVMaWtlSWNvbiIsImJpbmQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVsZXRlQnV0dG9uIiwiX2hhbmRsZURlbGV0ZUJ1dHRvbiIsIl9jYXJkSW1hZ2UiLCJkaXNsaWtlQ2FyZCIsInRoZW4iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJsaWtlQ2FyZCIsImFkZCIsImNhcmRJZCIsIl9jYXJkRWxlbWVudCIsImRhdGFzZXQiLCJpZCIsIm9wZW4iLCJzZXRDb25maXJtQ2FsbGJhY2siLCJnZXRWaWV3IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9jYXJkVGl0bGUiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIkZvcm1WYWxpZGF0b3IiLCJzZXR0aW5ncyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbGVtZW50IiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlRWxlbWVudCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJmb3VuZEludmFsaWQiLCJfaW5wdXRFbGVtZW50cyIsImZvckVhY2giLCJkaXNhYmxlQnV0dG9uIiwiX3N1Ym1pdEJ1dHRvbiIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvckFsbCIsImVuYWJsZVZhbGlkYXRpb24iLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0VmFsaWRhdGlvbiIsIlBvcHVwIiwiX3JlZiIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXBFbGVtZW50IiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9wb3B1cEZvcm0iLCJfaW5wdXRMaXN0IiwiX3N1Ym1pdEJ1dHRvblRleHQiLCJzZXRJbnB1dFZhbHVlcyIsImRhdGEiLCJpbnB1dCIsInZhbHVlIiwiZ2V0Rm9ybSIsInJlc2V0IiwiX3JlbmRlckxvYWRpbmciLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsImlzTG9hZGluZyIsImZpbmFsbHkiLCJwcm9maWxlRWRpdEJ0biIsInByb2ZpbGVFZGl0Rm9ybSIsImZvcm1zIiwiY2FyZExpc3RFbGVtZW50IiwiYWRkTmV3Q2FyZEJ0biIsIm5ld0NhcmRGb3JtIiwiZGVsZXRlQnV0dG9uIiwiYXZhdGFyRWRpdEJ1dHRvbiIsImF2YXRhckZvcm0iLCJvcHRpb25zIiwiX2Jhc2VVcmwiLCJiYXNlVXJsIiwiX2hlYWRlcnMiLCJoZWFkZXJzIiwiZ2V0VXNlckluZm8iLCJmZXRjaCIsIm1ldGhvZCIsIl9oYW5kbGVSZXNwb25zZSIsInNldFVzZXJJbmZvIiwiYWJvdXQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEluaXRpYWxDYXJkcyIsInNldFVzZXJBdmF0YXIiLCJhdmF0YXIiLCJhZGRDYXJkIiwiX3JlZjIiLCJkZWxldGVDYXJkIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImF1dGhvcml6YXRpb24iLCJoYW5kbGVDb25maXJtIiwiX2hhbmRsZUNvbmZpcm0iLCJfY29uZmlybUJ1dHRvbiIsIl9jYXJkSWQiLCJjYWxsYmFjayIsImNhcmRFbGVtZW50IiwidXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZUVsZW1lbnQiLCJfZGVzY3JpcHRpb25FbGVtZW50IiwiX2F2YXRhckVsZW1lbnQiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtIiwiYWRkSXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwicmVuZGVyQ2FyZCIsImF2YXRhclBvcHVwIiwidXBkYXRlZERhdGEiLCJlZGl0Rm9ybVZhbGlkYXRpb24iLCJhZGRGb3JtVmFsaWRhdGlvbiIsImF2YXRhckZvcm1WYWxpZGF0aW9uIiwicHJvZmlsZVBvcHVwIiwiYWRkQ2FyZFBvcHVwIiwidGl0bGUiLCJuZXdDYXJkIiwicHJldmlld0ltYWdlUG9wdXAiLCJfaW1hZ2UiLCJfdGl0bGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjYXJkcyIsImN1cnJlbnRVc2VySW5mbyJdLCJzb3VyY2VSb290IjoiIn0=